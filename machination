#!/usr/bin/env python
import argparse
import logging
import os

from logging import StreamHandler
formatter = logging.Formatter('%(message)s')
strHandler = StreamHandler()
strHandler.setLevel(logging.DEBUG)
strHandler.setFormatter(formatter)

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.addHandler(strHandler)
  
MACHINATION_INSTALLPATH="/opt/machination"


def listPath(d):
    return [os.path.join(d, f) for f in os.listdir(d)]

def listProvisionerTemplates(args):
  logger.debug("List templates for provisioner "+args.provisioner)
  listAnsibleTemplates()

def listAnsibleTemplates():
  logger.debug("List ansible template")
  paths = listPath(os.path.join(MACHINATION_INSTALLPATH,'provisioner','playbooks'))
  data = {'name': [],'version': [],'path': [],'provisioner': []}
  #data = []
  for f in paths:
    fileName = os.path.basename(f)
    templateName = os.path.splitext(fileName)[0]
    data['name'].append(templateName)
    data['version'].append('1.0')
    data['path'].append(f)
    data['provisioner'].append('ansible')
  name_col_width = max(len(word) for word in data['name']) + len("Name") + 2 
  version_col_width = max(len(word) for word in data['version']) + len("Version") + 2
  path_col_width = max(len(word) for word in data['path']) + len("Path") +2
  pro_col_width = max(len(word) for word in data['provisioner']) + len("Provisioner") + 2

  logger.info("Name".ljust(name_col_width) + "Version".ljust(version_col_width) + "Path".ljust(path_col_width) +  "Provisioner".ljust(pro_col_width))

  for row in range(0, len(data['name'])):
    print data['name'][row].ljust(name_col_width) + data['version'][row].ljust(version_col_width) + data['path'][row].ljust(path_col_width) +  data['provisioner'][row].ljust(pro_col_width)
 
def listInstances():
  logger.debug("List instances")

def createMachine(args):
  logger.debug("Create machine "+ args.name + " from template " + args.template + " in " + args.path + " using " + args.provisioner) 

def destroyMachine(args):
  logger.debug("Destroy machine "+ args.name) 

def startMachine(args):
  logger.debug("Start machine "+ args.name) 

def stopMachine(args):
  logger.debug("Stop machine "+ args.name) 

def sshMachine(args):
  logger.debug("SSH to machine "+ args.name) 



class DestroyMachine(argparse.Action):
  #def __init__(self, option_strings, dest, nargs=None, **kwargs):
  #  if nargs is not None:
  #    raise ValueError("nargs not allowed")
  #  super(ListMachines, self).__init__(option_strings, dest, **kwargs)
  def __call__(self, parser, namespace, values, option_string=None):
    print 'Create machine %r %r %r' % (namespace, values, option_string)


class StartMachine(argparse.Action):
  #def __init__(self, option_strings, dest, nargs=None, **kwargs):
  #  if nargs is not None:
  #    raise ValueError("nargs not allowed")
  #  super(ListMachines, self).__init__(option_strings, dest, **kwargs)
  def __call__(self, parser, namespace, values, option_string=None):
    print 'Create machine %r %r %r' % (namespace, values, option_string)


class StopMachine(argparse.Action):
  #def __init__(self, option_strings, dest, nargs=None, **kwargs):
  #  if nargs is not None:
  #    raise ValueError("nargs not allowed")
  #  super(ListMachines, self).__init__(option_strings, dest, **kwargs)
  def __call__(self, parser, namespace, values, option_string=None):
    print 'Create machine %r %r %r' % (namespace, values, option_string)

parser = argparse.ArgumentParser(prog="Machination", description='Machination utility, easily instantiate vagrant based machines.')

rootSubparsers = parser.add_subparsers(help='List available machines')

listParser = rootSubparsers.add_parser('list', help='List elements')
listSubparsers = listParser.add_subparsers(help='List available machines')

templateSubparser = listSubparsers.add_parser('templates', help='List templates')
templateSubparser.add_argument('provisioner', choices=['ansible'], nargs='*', default='ansible', help="List templates of a provider")
templateSubparser.set_defaults(func=listProvisionerTemplates)

createParser = rootSubparsers.add_parser('create', help='Create the given machine in the path')
createParser.add_argument('template', help='Name of the template to create')
createParser.add_argument('name', help='Name of the machine to create')
createParser.add_argument('path', help='Path where to create the machine')
createParser.add_argument('provisioner', choices=['ansible'],nargs='?', default='ansible', help="List templates of a provider")
createParser.set_defaults(func=createMachine)

destroyParser = rootSubparsers.add_parser('destroy', help='Destroy the given machine in the path')
destroyParser.add_argument('name', help='Name of the machine to destroy')
destroyParser.set_defaults(func=destroyMachine)

startParser = rootSubparsers.add_parser('start', help='Start the given machine')
startParser.add_argument('name', help='Name of the machine to start')
startParser.set_defaults(func=startMachine)

stopParser = rootSubparsers.add_parser('stop', help='Stop the given machine')
stopParser.add_argument('name', help='Name of the machine to stop')
stopParser.set_defaults(func=stopMachine)

sshParser = rootSubparsers.add_parser('destroy', help='SSH to the given machine')
sshParser.add_argument('name', help='Name of the machine to ssh in')
sshParser.set_defaults(func=sshMachine)



args = parser.parse_args()
args.func(args)
#print args
#print args.acculate(args.integers)
