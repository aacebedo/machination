#!/usr/bin/env python
import argparse
import os
import sys
import yaml
import subprocess

from yaml.loader import BaseLoader
def parseArgs(rawArgs):
  parser = argparse.ArgumentParser(prog="machination_postprocessor", description='Post processing script for machination instances.')
  parser.add_argument('--type', '-t', help="Type of machine to postprocess", type=str, choices=["vbox", "docker"])
  parser.add_argument('--box', '-b', default="./machine.box", help="Machine's box path", type=str)
  parser.add_argument('--name', '-n', help="Machine's name", type=str)
  parser.add_argument('--hash', '-m', default="./hash", help="Machine's hash", type=str)
  return parser.parse_args(rawArgs)

def postProcessVbox(machineBoxPath, machineName, hashValue):
  if(os.path.exists(machineBoxPath)):
    cmd = "vagrant box add {0} {1}-{2}".format(machineBoxPath, machineName, hashValue)
    print(cmd)
    # Fire up the vagrant machine
    p = subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE, cwd=os.path.dirname(machineBoxPath))
    p.communicate()[0]
    if p.returncode != 0:
      raise RuntimeError("Error while postprocessing '{0}'".format(machineBoxPath));
  else:
    raise RuntimeError("Machine box '{0}' cannot be found.".format(machineBoxPath))

def postProcessDocker(machineBoxPath, machineName, hashValue):
  #if(os.path.exists(machineBoxPath)):
    cmd = "cat {0} | docker import - {1}:{2}".format(machineBoxPath, machineName, hashValue)
    print(cmd)
    
    # Fire up the vagrant machine
    p = subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE, cwd=os.path.dirname(machineBoxPath))
    p.communicate()[0]
    if p.returncode != 0:
      raise RuntimeError("Error while postprocessing '{0}'".format(machineBoxPath));
  #else:
  #  raise RuntimeError("Machine box '{0}' cannot be found.".format(machineBoxPath))
  
def __main__():
  try:
    #args = parseArgs(sys.argv[1:])
    type = None
    name = None
    #if(args.name == None or args.type == None):
    configFile = yaml.load(file("./machine.config", 'r'),BaseLoader)
    if("provider" in configFile):
      type = configFile["provider"]
    else:
      raise RuntimeError("Invalid provider type")
      
    if("architecture" in configFile and 
       "os_version" in configFile and 
       "provisioner" in configFile and 
       "template" in configFile):
      name = "machination-{0}-{1}-{2}-{3}".format(configFile["template"].lower(),
                                                    configFile["architecture"].lower(),
                                                    configFile["os_version"].lower(),
                                                    configFile["provisioner"].lower())
      
    else:
        raise RuntimeError("Invalid instance name")  
    #else:
    #  name = args.name
    #  type = args.type
  
    hashFile = open("./hash", "r")
      
    if(type == "docker"):
      postProcessDocker("./machine.box", name, hashFile.read())
    if(type == "vbox"):
      postProcessVbox("./machine.box", name, hashFile.read())
  
    sys.exit()
  except Exception as e:
    sys.exit(e) 

if __name__ == "__main__":
    __main__()
