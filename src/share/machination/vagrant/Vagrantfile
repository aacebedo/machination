##########################################################################
# Machination
# Copyright (c) 2014, Alexandre ACEBEDO, All rights reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.
##########################################################################

require 'yaml'
ENV['VAGRANT_DEFAULT_PROVIDER'] = "docker"

cwd = File.dirname(File.expand_path(__FILE__))
machine_config = YAML.load_file("#{cwd}/machine.config")
supportedProvisioners = ["ansible"]
supportedProviders = ["docker"]
supportedArchs = ["x64"]

name = "machination-"+cwd.split('/').last

if not machine_config["arch"]
	abort("Architecture is missing from the configuration file. Check the machine_instance_config file.")
end

if not machine_config["provider"]
	abort("Provider is missing from the configuration file. Check the machine_instance_config file.")
end

if not machine_config["provisioner"]
	abort("Provisioner is missing from the configuration file. Check the machine_instance_config file.")
end

if not machine_config["template"]
  abort("Template is missing from the configuration file. Check the machine_instance_config file.")
end

if not machine_config["guest_interfaces"]
  abort("Guest interfaces are missing from the configuration file. Check the machine_instance_config file.")
end

if not supportedProviders.include?(machine_config["provider"])
	abort("Given provider "+machine_config["provider"]+" is not supported. Supported providers are "+supportedProviders+". Check the machine_instance_config file.")
end

if not supportedProvisioners.include?(machine_config["provisioner"])
	abort("Given provisioner "+machine_config["provisioner"]+" is not supported. Supported provisioners are "+supportedProvisioners+". Check the machine_instance_config file.")
end

templateSplit = machine_config["template"].split(":")
if templateSplit.length != 2
  abort("Invalid template name (shall be <template_name>|<version>.")
end
imageName = "machination-"+templateSplit[0]+"-"+machine_config["arch"]+"-"+machine_config["os_version"]+"-"+machine_config["provisioner"]+":"+templateSplit[1]
imageName = imageName.downcase
    
Vagrant.configure("2") do |config|
  config.ssh.forward_agent = true
  config.vm.network "public_network"
  config.ssh.forward_x11 = true 
  config.vm.hostname = name

  if machine_config["synced_folders"]
	  for f in machine_config["synced_folders"]
	  	if f["host_dir"] and f["guest_dir"]
		  	config.vm.synced_folder f["host_dir"], f["guest_dir"]
      end
	  end
  end

  if machine_config["provider"] == "docker"
    config.vm.define name do |a|
      a.vm.provider "docker" do |d|
        d.image = imageName
        d.name = name
        d.remains_running = true
        d.create_args = ["-t","-i"]
        d.privileged = true
        d.cmd = ["/sbin/init"]
        d.has_ssh = true
      end
    end
    config.vm.provision :host_shell,run: "always" do |host_shell|
      command = ""
      counter=0
      if ARGV[0] == "up"
        if machine_config["guest_interfaces"] != 0
         puts("Additionnal network interfaces require root access.")
	      for i in machine_config["guest_interfaces"]
	        counter+=1
	        if i["host_interface"] and i["ip_addr"] and i["mac_addr"]
	          if i["ip_addr"] == "dhcp"
	            if i["hostname"]
	             	command += "sudo pipework " + i["host_interface"] + " -i eth" + counter.to_s + " " + name + " dhcp " + i["mac_addr"] + " " + i["hostname"] + ";"
	            else
	            	command += "sudo pipework " + i["host_interface"] + " -i eth" + counter.to_s + " " + name + " dhcp " + i["mac_addr"] + ";"
	            end
	          else
	            command += "sudo pipework " + i["host_interface"] + " -i eth" + counter.to_s + " " + name + " " + i["ip_addr"] + "/24 " + i["mac_addr"] + ";"
	          end
	        else
	          puts("An interface description is malformed. Check the machine_instance_config file.")
	        end
	      end
	    end
      end
      host_shell.inline = command
    end
  end
end
