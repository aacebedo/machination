##########################################################################
# Vagrantfile
# Copyright (c) 2014, Alexandre ACEBEDO, All rights reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.
##########################################################################
require 'yaml'
ENV['VAGRANT_DEFAULT_PROVIDER'] = "docker"

if not ENV.has_key?('MACHINATION_INSTALLDIR')
	abort("Environment variable MACHINATION_INSTALLDIR not set. Check your installation.")
end 

cwd = File.dirname(File.expand_path(__FILE__))
machine_config    = YAML.load_file("#{cwd}/config.yml")
if not machine_config["name"]
	abort("Name is missing from the configuration file. Check the config.yml file.")
end

if not machine_config["arch"]
	abort("Architecture is missing from the configuration file. Check the config.yml file.")
end

Vagrant.configure("2") do |config|
  config.ssh.forward_agent = true
  config.vm.network "public_network"
  config.ssh.forward_x11 = true
  config.vm.hostname = machine_config["name"]
  
  if machine_config["synced_folders"]
	  for f in machine_config["synced_folders"]
	  	if f["host_dir"] and f["guest_dir"]
		  	config.vm.synced_folder f["host_dir"], f["guest_dir"]		  	
		end 
	  end
  end
 
  config.vm.define machine_config["name"] do |a|
   a.vm.provider "docker" do |d|
	  d.image = "aacebedo/ubuntu-"+machine_config["os_version"]+"-vagrant-"+machine_config["arch"]
      d.name = machine_config["name"]
      d.remains_running = true
      d.create_args = ["-t","-i"]
      d.privileged = true
      d.cmd = ["/sbin/init"]
      d.has_ssh = true
	end
   end

#  config.vm.provision :host_shell,run: "always" do |host_shell|
#    command = ""
#    counter=0
#    for i in machine_config["guest_interfaces"]
#  		counter+=1
#  		if machine_config["host_interface"] and i["ipaddr"] and i["macaddr"]
#	  		if i["hostname"]
#	  			command += "pipework " + machine_config["host_interface"] + " -i eth" + counter.to_s + " " + machine_config["name"] + " " + i["hostname"] + " " + i["ipaddr"] + " " + i["macaddr"] + ";"
#			else
#				command += "pipework " + machine_config["host_interface"] + " -i eth" + counter.to_s + " " + machine_config["name"] + " " + machine_config["name"] + " " + i["ipaddr"] + " " + i["macaddr"] + ";"
#			end
#		else
#			puts("An interface description is malformed. Check the config.yml file.")
#		end
#	end
#    host_shell.inline = command
#  end
#
#  config.vm.provision :ansible do |ansible|
#	if not machine_config["template"]
#		abort("Ansible template is missing from the configuration file. Check the config.yml file.")
#	end
# 	if not File.exist?(File.join(ENV['MACHINATION_INSTALLDIR'],"share","machination","provisioner","ansible","playbooks",machine_config["template"]+".playbook"))
#  		abort("Ansible template file is missing ("+File.join(ENV['MACHINATION_INSTALLDIR'],"share","machination","provisioner","ansible","playbooks",machine_config["template"]+".playbook")+"). Check your installation.")
#  	end
#  	
#  	ENV['ANSIBLE_CONFIG'] = File.join(ENV['MACHINATION_INSTALLDIR'],"share","machination","provisioner","ansible","ansible.cfg")
#    
#  	ansible.playbook = File.join(ENV['MACHINATION_INSTALLDIR'],"share","machination","provisioner","ansible","playbooks",machine_config["template"]+".playbook")
#    ansible.sudo = true
#  end
end 
